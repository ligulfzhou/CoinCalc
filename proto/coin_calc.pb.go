// Code generated by protoc-gen-go. DO NOT EDIT.
// source: coin_calc.proto

/*
Package CoinCalc is a generated protocol buffer package.

It is generated from these files:
	coin_calc.proto

It has these top-level messages:
	CoinListRequest
	Coin
	UserCoin
	CoinListResponse
	PriceRequest
	CoinPriceResponse
	SetUserCoinRequest
	SetUserCoinResponse
	GetUserCoinRequest
	GetUserCoinsResponse
	DeleteUserCoinRequest
	Empty
	SearchCoinRequest
*/
package CoinCalc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CoinListRequest struct {
	Page int32 `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
}

func (m *CoinListRequest) Reset()                    { *m = CoinListRequest{} }
func (m *CoinListRequest) String() string            { return proto.CompactTextString(m) }
func (*CoinListRequest) ProtoMessage()               {}
func (*CoinListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CoinListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type Coin struct {
	Id                   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Symbol               string `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	Name                 string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	PriceUsd             string `protobuf:"bytes,4,opt,name=price_usd,json=priceUsd" json:"price_usd,omitempty"`
	PriceBtc             string `protobuf:"bytes,5,opt,name=price_btc,json=priceBtc" json:"price_btc,omitempty"`
	PercentChangeOneHour string `protobuf:"bytes,6,opt,name=percent_change_one_hour,json=percentChangeOneHour" json:"percent_change_one_hour,omitempty"`
	PercentChangeOneDay  string `protobuf:"bytes,7,opt,name=percent_change_one_day,json=percentChangeOneDay" json:"percent_change_one_day,omitempty"`
	PercentChangeOneWeek string `protobuf:"bytes,8,opt,name=percent_change_one_week,json=percentChangeOneWeek" json:"percent_change_one_week,omitempty"`
	MarketCapUsd         string `protobuf:"bytes,9,opt,name=market_cap_usd,json=marketCapUsd" json:"market_cap_usd,omitempty"`
	OneDayVolumnUsd      string `protobuf:"bytes,10,opt,name=one_day_volumn_usd,json=oneDayVolumnUsd" json:"one_day_volumn_usd,omitempty"`
	AvailableSupply      string `protobuf:"bytes,11,opt,name=available_supply,json=availableSupply" json:"available_supply,omitempty"`
	TotalSupply          string `protobuf:"bytes,12,opt,name=total_supply,json=totalSupply" json:"total_supply,omitempty"`
}

func (m *Coin) Reset()                    { *m = Coin{} }
func (m *Coin) String() string            { return proto.CompactTextString(m) }
func (*Coin) ProtoMessage()               {}
func (*Coin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Coin) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Coin) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Coin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Coin) GetPriceUsd() string {
	if m != nil {
		return m.PriceUsd
	}
	return ""
}

func (m *Coin) GetPriceBtc() string {
	if m != nil {
		return m.PriceBtc
	}
	return ""
}

func (m *Coin) GetPercentChangeOneHour() string {
	if m != nil {
		return m.PercentChangeOneHour
	}
	return ""
}

func (m *Coin) GetPercentChangeOneDay() string {
	if m != nil {
		return m.PercentChangeOneDay
	}
	return ""
}

func (m *Coin) GetPercentChangeOneWeek() string {
	if m != nil {
		return m.PercentChangeOneWeek
	}
	return ""
}

func (m *Coin) GetMarketCapUsd() string {
	if m != nil {
		return m.MarketCapUsd
	}
	return ""
}

func (m *Coin) GetOneDayVolumnUsd() string {
	if m != nil {
		return m.OneDayVolumnUsd
	}
	return ""
}

func (m *Coin) GetAvailableSupply() string {
	if m != nil {
		return m.AvailableSupply
	}
	return ""
}

func (m *Coin) GetTotalSupply() string {
	if m != nil {
		return m.TotalSupply
	}
	return ""
}

type UserCoin struct {
	User   string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Symbol string `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Cnt    string `protobuf:"bytes,4,opt,name=cnt" json:"cnt,omitempty"`
	Coin   *Coin  `protobuf:"bytes,5,opt,name=coin" json:"coin,omitempty"`
}

func (m *UserCoin) Reset()                    { *m = UserCoin{} }
func (m *UserCoin) String() string            { return proto.CompactTextString(m) }
func (*UserCoin) ProtoMessage()               {}
func (*UserCoin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserCoin) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserCoin) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *UserCoin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserCoin) GetCnt() string {
	if m != nil {
		return m.Cnt
	}
	return ""
}

func (m *UserCoin) GetCoin() *Coin {
	if m != nil {
		return m.Coin
	}
	return nil
}

type CoinListResponse struct {
	Coins []*Coin `protobuf:"bytes,1,rep,name=coins" json:"coins,omitempty"`
}

func (m *CoinListResponse) Reset()                    { *m = CoinListResponse{} }
func (m *CoinListResponse) String() string            { return proto.CompactTextString(m) }
func (*CoinListResponse) ProtoMessage()               {}
func (*CoinListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CoinListResponse) GetCoins() []*Coin {
	if m != nil {
		return m.Coins
	}
	return nil
}

type PriceRequest struct {
	Symbols []string `protobuf:"bytes,1,rep,name=symbols" json:"symbols,omitempty"`
}

func (m *PriceRequest) Reset()                    { *m = PriceRequest{} }
func (m *PriceRequest) String() string            { return proto.CompactTextString(m) }
func (*PriceRequest) ProtoMessage()               {}
func (*PriceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PriceRequest) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

type CoinPriceResponse struct {
	Coins []*Coin `protobuf:"bytes,1,rep,name=coins" json:"coins,omitempty"`
}

func (m *CoinPriceResponse) Reset()                    { *m = CoinPriceResponse{} }
func (m *CoinPriceResponse) String() string            { return proto.CompactTextString(m) }
func (*CoinPriceResponse) ProtoMessage()               {}
func (*CoinPriceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CoinPriceResponse) GetCoins() []*Coin {
	if m != nil {
		return m.Coins
	}
	return nil
}

type SetUserCoinRequest struct {
	Uc *UserCoin `protobuf:"bytes,1,opt,name=uc" json:"uc,omitempty"`
}

func (m *SetUserCoinRequest) Reset()                    { *m = SetUserCoinRequest{} }
func (m *SetUserCoinRequest) String() string            { return proto.CompactTextString(m) }
func (*SetUserCoinRequest) ProtoMessage()               {}
func (*SetUserCoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SetUserCoinRequest) GetUc() *UserCoin {
	if m != nil {
		return m.Uc
	}
	return nil
}

type SetUserCoinResponse struct {
	Uc *UserCoin `protobuf:"bytes,1,opt,name=uc" json:"uc,omitempty"`
}

func (m *SetUserCoinResponse) Reset()                    { *m = SetUserCoinResponse{} }
func (m *SetUserCoinResponse) String() string            { return proto.CompactTextString(m) }
func (*SetUserCoinResponse) ProtoMessage()               {}
func (*SetUserCoinResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SetUserCoinResponse) GetUc() *UserCoin {
	if m != nil {
		return m.Uc
	}
	return nil
}

type GetUserCoinRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *GetUserCoinRequest) Reset()                    { *m = GetUserCoinRequest{} }
func (m *GetUserCoinRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserCoinRequest) ProtoMessage()               {}
func (*GetUserCoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetUserCoinRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type GetUserCoinsResponse struct {
	Ucs []*UserCoin `protobuf:"bytes,1,rep,name=ucs" json:"ucs,omitempty"`
}

func (m *GetUserCoinsResponse) Reset()                    { *m = GetUserCoinsResponse{} }
func (m *GetUserCoinsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetUserCoinsResponse) ProtoMessage()               {}
func (*GetUserCoinsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetUserCoinsResponse) GetUcs() []*UserCoin {
	if m != nil {
		return m.Ucs
	}
	return nil
}

type DeleteUserCoinRequest struct {
	User   string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Symbol string `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *DeleteUserCoinRequest) Reset()                    { *m = DeleteUserCoinRequest{} }
func (m *DeleteUserCoinRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserCoinRequest) ProtoMessage()               {}
func (*DeleteUserCoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteUserCoinRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *DeleteUserCoinRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *DeleteUserCoinRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type SearchCoinRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *SearchCoinRequest) Reset()                    { *m = SearchCoinRequest{} }
func (m *SearchCoinRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchCoinRequest) ProtoMessage()               {}
func (*SearchCoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SearchCoinRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*CoinListRequest)(nil), "CoinCalc.CoinListRequest")
	proto.RegisterType((*Coin)(nil), "CoinCalc.Coin")
	proto.RegisterType((*UserCoin)(nil), "CoinCalc.UserCoin")
	proto.RegisterType((*CoinListResponse)(nil), "CoinCalc.CoinListResponse")
	proto.RegisterType((*PriceRequest)(nil), "CoinCalc.PriceRequest")
	proto.RegisterType((*CoinPriceResponse)(nil), "CoinCalc.CoinPriceResponse")
	proto.RegisterType((*SetUserCoinRequest)(nil), "CoinCalc.SetUserCoinRequest")
	proto.RegisterType((*SetUserCoinResponse)(nil), "CoinCalc.SetUserCoinResponse")
	proto.RegisterType((*GetUserCoinRequest)(nil), "CoinCalc.GetUserCoinRequest")
	proto.RegisterType((*GetUserCoinsResponse)(nil), "CoinCalc.GetUserCoinsResponse")
	proto.RegisterType((*DeleteUserCoinRequest)(nil), "CoinCalc.DeleteUserCoinRequest")
	proto.RegisterType((*Empty)(nil), "CoinCalc.Empty")
	proto.RegisterType((*SearchCoinRequest)(nil), "CoinCalc.SearchCoinRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CoinCalc service

type CoinCalcClient interface {
	GetCoins(ctx context.Context, in *CoinListRequest, opts ...grpc.CallOption) (*CoinListResponse, error)
	GetCoinPrices(ctx context.Context, in *PriceRequest, opts ...grpc.CallOption) (*CoinPriceResponse, error)
	SetUserCoin(ctx context.Context, in *SetUserCoinRequest, opts ...grpc.CallOption) (*SetUserCoinResponse, error)
	GetUserCoins(ctx context.Context, in *GetUserCoinRequest, opts ...grpc.CallOption) (*GetUserCoinsResponse, error)
	DeleteUserCoin(ctx context.Context, in *DeleteUserCoinRequest, opts ...grpc.CallOption) (*Empty, error)
	SearchCoin(ctx context.Context, in *SearchCoinRequest, opts ...grpc.CallOption) (*CoinListResponse, error)
}

type coinCalcClient struct {
	cc *grpc.ClientConn
}

func NewCoinCalcClient(cc *grpc.ClientConn) CoinCalcClient {
	return &coinCalcClient{cc}
}

func (c *coinCalcClient) GetCoins(ctx context.Context, in *CoinListRequest, opts ...grpc.CallOption) (*CoinListResponse, error) {
	out := new(CoinListResponse)
	err := grpc.Invoke(ctx, "/CoinCalc.CoinCalc/GetCoins", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinCalcClient) GetCoinPrices(ctx context.Context, in *PriceRequest, opts ...grpc.CallOption) (*CoinPriceResponse, error) {
	out := new(CoinPriceResponse)
	err := grpc.Invoke(ctx, "/CoinCalc.CoinCalc/GetCoinPrices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinCalcClient) SetUserCoin(ctx context.Context, in *SetUserCoinRequest, opts ...grpc.CallOption) (*SetUserCoinResponse, error) {
	out := new(SetUserCoinResponse)
	err := grpc.Invoke(ctx, "/CoinCalc.CoinCalc/SetUserCoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinCalcClient) GetUserCoins(ctx context.Context, in *GetUserCoinRequest, opts ...grpc.CallOption) (*GetUserCoinsResponse, error) {
	out := new(GetUserCoinsResponse)
	err := grpc.Invoke(ctx, "/CoinCalc.CoinCalc/GetUserCoins", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinCalcClient) DeleteUserCoin(ctx context.Context, in *DeleteUserCoinRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/CoinCalc.CoinCalc/DeleteUserCoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinCalcClient) SearchCoin(ctx context.Context, in *SearchCoinRequest, opts ...grpc.CallOption) (*CoinListResponse, error) {
	out := new(CoinListResponse)
	err := grpc.Invoke(ctx, "/CoinCalc.CoinCalc/SearchCoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CoinCalc service

type CoinCalcServer interface {
	GetCoins(context.Context, *CoinListRequest) (*CoinListResponse, error)
	GetCoinPrices(context.Context, *PriceRequest) (*CoinPriceResponse, error)
	SetUserCoin(context.Context, *SetUserCoinRequest) (*SetUserCoinResponse, error)
	GetUserCoins(context.Context, *GetUserCoinRequest) (*GetUserCoinsResponse, error)
	DeleteUserCoin(context.Context, *DeleteUserCoinRequest) (*Empty, error)
	SearchCoin(context.Context, *SearchCoinRequest) (*CoinListResponse, error)
}

func RegisterCoinCalcServer(s *grpc.Server, srv CoinCalcServer) {
	s.RegisterService(&_CoinCalc_serviceDesc, srv)
}

func _CoinCalc_GetCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinCalcServer).GetCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoinCalc.CoinCalc/GetCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinCalcServer).GetCoins(ctx, req.(*CoinListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinCalc_GetCoinPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinCalcServer).GetCoinPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoinCalc.CoinCalc/GetCoinPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinCalcServer).GetCoinPrices(ctx, req.(*PriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinCalc_SetUserCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinCalcServer).SetUserCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoinCalc.CoinCalc/SetUserCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinCalcServer).SetUserCoin(ctx, req.(*SetUserCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinCalc_GetUserCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinCalcServer).GetUserCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoinCalc.CoinCalc/GetUserCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinCalcServer).GetUserCoins(ctx, req.(*GetUserCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinCalc_DeleteUserCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinCalcServer).DeleteUserCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoinCalc.CoinCalc/DeleteUserCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinCalcServer).DeleteUserCoin(ctx, req.(*DeleteUserCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinCalc_SearchCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinCalcServer).SearchCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CoinCalc.CoinCalc/SearchCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinCalcServer).SearchCoin(ctx, req.(*SearchCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoinCalc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CoinCalc.CoinCalc",
	HandlerType: (*CoinCalcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCoins",
			Handler:    _CoinCalc_GetCoins_Handler,
		},
		{
			MethodName: "GetCoinPrices",
			Handler:    _CoinCalc_GetCoinPrices_Handler,
		},
		{
			MethodName: "SetUserCoin",
			Handler:    _CoinCalc_SetUserCoin_Handler,
		},
		{
			MethodName: "GetUserCoins",
			Handler:    _CoinCalc_GetUserCoins_Handler,
		},
		{
			MethodName: "DeleteUserCoin",
			Handler:    _CoinCalc_DeleteUserCoin_Handler,
		},
		{
			MethodName: "SearchCoin",
			Handler:    _CoinCalc_SearchCoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coin_calc.proto",
}

func init() { proto.RegisterFile("coin_calc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 627 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4d, 0x4f, 0xdb, 0x40,
	0x10, 0x55, 0xbe, 0x20, 0x99, 0xa4, 0x09, 0x0c, 0x94, 0xba, 0xa1, 0x1f, 0x74, 0x45, 0x55, 0xaa,
	0x4a, 0x1c, 0x40, 0x95, 0x40, 0xea, 0xa5, 0x04, 0x44, 0x55, 0x21, 0xb5, 0x0a, 0xa2, 0x1c, 0xad,
	0xcd, 0x66, 0x04, 0x16, 0x8e, 0xd7, 0xf5, 0xae, 0xa9, 0x72, 0xeb, 0xcf, 0xea, 0xb1, 0x3f, 0xad,
	0xf2, 0xc4, 0xc6, 0x0e, 0x98, 0x0a, 0x6e, 0xe3, 0x79, 0xef, 0xcd, 0xec, 0xec, 0x1b, 0xad, 0xa1,
	0xa7, 0xb4, 0x17, 0xb8, 0x4a, 0xfa, 0x6a, 0x3b, 0x8c, 0xb4, 0xd5, 0xd8, 0x1c, 0x68, 0x2f, 0x18,
	0x48, 0x5f, 0x89, 0xb7, 0xd0, 0x4b, 0xe2, 0x13, 0xcf, 0xd8, 0x21, 0xfd, 0x8c, 0xc9, 0x58, 0x44,
	0xa8, 0x87, 0xf2, 0x82, 0x9c, 0xca, 0x46, 0x65, 0xab, 0x31, 0xe4, 0x58, 0xfc, 0xad, 0x41, 0x3d,
	0xe1, 0x61, 0x17, 0xaa, 0xde, 0x98, 0xa1, 0xd6, 0xb0, 0xea, 0x8d, 0x71, 0x0d, 0x16, 0xcc, 0x74,
	0x32, 0xd2, 0xbe, 0x53, 0xe5, 0x5c, 0xfa, 0x95, 0x14, 0x09, 0xe4, 0x84, 0x9c, 0x1a, 0x67, 0x39,
	0xc6, 0x75, 0x68, 0x85, 0x91, 0xa7, 0xc8, 0x8d, 0xcd, 0xd8, 0xa9, 0x33, 0xd0, 0xe4, 0xc4, 0x99,
	0x19, 0xe7, 0xe0, 0xc8, 0x2a, 0xa7, 0x51, 0x00, 0x0f, 0xac, 0xc2, 0x8f, 0xf0, 0x2c, 0xa4, 0x48,
	0x51, 0x60, 0x5d, 0x75, 0x29, 0x83, 0x0b, 0x72, 0x75, 0x40, 0xee, 0xa5, 0x8e, 0x23, 0x67, 0x81,
	0xa9, 0xab, 0x29, 0x3c, 0x60, 0xf4, 0x5b, 0x40, 0x5f, 0x74, 0x1c, 0xe1, 0x2e, 0xac, 0x95, 0xc8,
	0xc6, 0x72, 0xea, 0x2c, 0xb2, 0x6a, 0xe5, 0xb6, 0xea, 0x50, 0x4e, 0xef, 0xe9, 0xf5, 0x8b, 0xe8,
	0xca, 0x69, 0x96, 0xf7, 0x3a, 0x27, 0xba, 0xc2, 0x4d, 0xe8, 0x4e, 0x64, 0x74, 0x45, 0xd6, 0x55,
	0x32, 0xe4, 0x09, 0x5b, 0xcc, 0xee, 0xcc, 0xb2, 0x03, 0x19, 0x26, 0x53, 0x7e, 0x00, 0x4c, 0x8f,
	0xe0, 0x5e, 0x6b, 0x3f, 0x9e, 0x04, 0xcc, 0x04, 0x66, 0xf6, 0x34, 0x1f, 0xe0, 0x07, 0xe7, 0x13,
	0xf2, 0x7b, 0x58, 0x92, 0xd7, 0xd2, 0xf3, 0xe5, 0xc8, 0x27, 0xd7, 0xc4, 0x61, 0xe8, 0x4f, 0x9d,
	0xf6, 0x8c, 0x7a, 0x93, 0x3f, 0xe5, 0x34, 0xbe, 0x81, 0x8e, 0xd5, 0x56, 0xfa, 0x19, 0xad, 0xc3,
	0xb4, 0x36, 0xe7, 0x66, 0x14, 0xf1, 0xbb, 0x02, 0xcd, 0x33, 0x43, 0x11, 0xdb, 0x88, 0x50, 0x8f,
	0x0d, 0x45, 0xa9, 0x91, 0x1c, 0x3f, 0xca, 0xca, 0x25, 0xa8, 0xa9, 0xc0, 0xa6, 0x26, 0x26, 0x21,
	0x0a, 0xa8, 0x27, 0x5b, 0xc6, 0xd6, 0xb5, 0x77, 0xba, 0xdb, 0xd9, 0x86, 0x71, 0x30, 0x64, 0x4c,
	0xec, 0xc1, 0x52, 0xbe, 0x6c, 0x26, 0xd4, 0x81, 0x21, 0xdc, 0x84, 0x46, 0x82, 0x19, 0xa7, 0xb2,
	0x51, 0x2b, 0x11, 0xce, 0x40, 0xb1, 0x05, 0x9d, 0xef, 0xc9, 0x32, 0x64, 0x3b, 0xea, 0xc0, 0xe2,
	0xec, 0x74, 0x33, 0x5d, 0x6b, 0x98, 0x7d, 0x8a, 0x7d, 0x58, 0x4e, 0x84, 0x29, 0xfb, 0x51, 0x4d,
	0xf6, 0x00, 0x4f, 0xc9, 0x66, 0x77, 0x94, 0xb5, 0x12, 0x50, 0x8d, 0x15, 0x5f, 0x54, 0x7b, 0x07,
	0x73, 0xe1, 0x0d, 0xad, 0x1a, 0x2b, 0xb1, 0x0f, 0x2b, 0x73, 0xca, 0xb4, 0xed, 0x43, 0xa4, 0x5b,
	0x80, 0xc7, 0x77, 0x9b, 0x96, 0xf8, 0x23, 0x3e, 0xc1, 0x6a, 0x81, 0x69, 0x0a, 0xc3, 0xd5, 0x62,
	0x95, 0x8d, 0x56, 0xd6, 0x26, 0x81, 0xc5, 0x39, 0x3c, 0x3d, 0x24, 0x9f, 0x2c, 0x3d, 0xa0, 0xd5,
	0x63, 0x56, 0x41, 0x2c, 0x42, 0xe3, 0x68, 0x12, 0xda, 0xa9, 0x78, 0x07, 0xcb, 0xa7, 0x24, 0x23,
	0x75, 0x79, 0xab, 0x3a, 0x2b, 0x2a, 0xb9, 0x62, 0xe7, 0x4f, 0x0d, 0x6e, 0x1e, 0x20, 0xfc, 0x0c,
	0xcd, 0x63, 0xb2, 0x3c, 0x11, 0x3e, 0x9f, 0xf7, 0xa5, 0xf0, 0x28, 0xf5, 0xfb, 0x65, 0x50, 0x7a,
	0x01, 0x87, 0xf0, 0x24, 0x2d, 0xc1, 0xae, 0x1b, 0x5c, 0xcb, 0xc9, 0xc5, 0xad, 0xe9, 0xaf, 0xcf,
	0x17, 0x99, 0xdf, 0x91, 0xaf, 0xd0, 0x2e, 0x78, 0x88, 0x2f, 0x72, 0xee, 0xdd, 0xa5, 0xe8, 0xbf,
	0xbc, 0x07, 0x4d, 0x6b, 0x9d, 0x40, 0xa7, 0x68, 0x55, 0xb1, 0xd8, 0x5d, 0xb3, 0xfb, 0xaf, 0x4a,
	0xd1, 0xdc, 0xe0, 0x03, 0xe8, 0xce, 0x5b, 0x87, 0xaf, 0x73, 0x45, 0xa9, 0xa9, 0xfd, 0x5e, 0x4e,
	0x60, 0x73, 0xf0, 0x08, 0x20, 0x37, 0x07, 0xd7, 0x8b, 0xc7, 0xbf, 0x65, 0xd9, 0xff, 0xae, 0x7a,
	0xb4, 0xc0, 0xff, 0x8f, 0xdd, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x34, 0xb0, 0x2c, 0x52,
	0x06, 0x00, 0x00,
}
